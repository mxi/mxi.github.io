#!/usr/bin/python
import os
import re
import sys
import markdown
from dataclasses import dataclass


manual = \
"""
SYNOPSIS
    impress - markdown article to HTML page converter.

    This tool is intended to be a pre-processor for the article linking
    tool, amalgam, which generates the article index using the article 
    card pages generated by impress.

COMPOSITION
    Impress takes as input a file consisting of three (3) sections
    separated by a blank line: (1) the header, (2) the brief summary,
    and (3) the markdown content.

    The header contains meta-information used by both the card and page
    templates to generate a specialized index entry and HTML page
    respectively. Header syntax consists of a simple key/value pair
    in the form `<key>: <value>`.

    The brief summary section consists of a single, multi-line paragraph
    describing the article in more detail. This tends to be included in
    the HTML card for the index.

    The markdown content composes the rest of the file and provides
    the body of the article. Impress uses the community Python package
    to compile markdown.

    Here is a sample document:

    |   header_key_1: value_1
    |   header_key_2: value_2
    |   ...
    >
    |   Here is a brief summary
    |   which may span multiple
    |   lines!
    >
    |   # Introduction
    |
    |   The remaining content is markdown.
    |   ...

    where `>` denotes the empty line section separators.

TEMPLATING
    Templates may substitute header information via the `@<key>@`
    syntax, where `key` references a key in the header table described
    above.

    Special key/value pairs, called automatic pairs, are appended
    to the header during runtime:

        path-input
            Relative path to the input file (-i flag).

        path-output
            Relative path to the output file (-o flag).

        brief
            Brief summary section content.

        content
            HTML converted markdown content.

USAGE
    impress [-tc file] [-tp file] [-c file] [-o file] [-r] [-h] file

ARGUMENTS
    -tc file
        Specifies the card template file. Defaults to 
        `.gen/template/card.html`.

    -tp file
        Specifies the page template file. Defaults to
        `.gen/template/page.html`.

    -o file
        Specifies the page output file. Defaults to 
        `<base>/<root>.html` where `base` is the parent directory of the 
        input file, and `root` is the name of the input file stripped of 
        the last extension.

    -c file
        Specifies the card output file. Defaults to
        `<base>/<root>.card.html` where `base` is the parent directory
        of the input file, and `root` is the name of the input file
        stripped of the last extension.
    
    -h
        Print this manual.

    -i file
        Specifies the mandatory input file.

AUTHOR
    (C) Maxim Kasyanenko, 2021. MIT License.
"""


def jointmessage(*items):
    return ' '.join(str(x) for x in items)


def perror(*items):
    sys.stderr.write(f'(ERROR) {jointmessage(*items)}\n')


def pwarn(*items):
    sys.stdout.write(f'(WARN) {jointmessage(*items)}\n')


def pinfo(*items):
    sys.stdout.write(f'(INFO) {jointmessage(*items)}\n')


@dataclass
class Args: # refer to the manual above
    f_template_card: str = '.gen/template/card.html'
    f_template_page: str = '.gen/template/page.html'
    f_input: str = None
    f_card: str = None
    f_output: str = None
    fail_on_roam: bool = True # "roaming" variables in templates
    help_: bool = False


def argvpop():
    return sys.argv.pop(0) if sys.argv else None


def parseargs():
    args = Args()

    while sys.argv:
        word = argvpop()
        if   word == '-tc':
            args.f_template_card = argvpop()
        elif word == '-tp':
            args.f_template_page = argvpop()
        elif word == '-c':
            args.f_card = argvpop()
        elif word == '-o':
            args.f_output = argvpop()
        elif word == '-r':
            args.fail_on_roam = False
        elif word == '-h':
            args.help_ = True
        else:
            args.f_input = word

    return args


def main():
    # check for args
    a = parseargs()

    if a.help_:
        print(manual)
        return 0

    # f_input
    if not a.f_input:
        perror('input file must be specified.')
        perror('try: impress -h')
        return 1

    if not os.path.isfile(a.f_input):
        perror(f'input file "{a.f_input}" does not exist.')
        return 1
    
    f_input_base, f_input_name = os.path.split(a.f_input)
    f_input_root, f_input_ext = os.path.splitext(f_input_name)

    # f_card
    if not a.f_card:
        a.f_card = os.path.join(f_input_base, f'{f_input_root}.card.html')

    f_card_base, _ = os.path.split(a.f_card)
    try:
        if f_card_base:
            os.makedirs(f_card_base, exist_ok=True)
    except OSError as e:
        perror('failed to create parent directories:', e)
        return 1

    # f_output
    if not a.f_output:
        a.f_output = os.path.join(f_input_base, f'{f_input_root}.html')

    f_output_base, _ = os.path.split(a.f_output)
    try:
        if f_output_base:
            os.makedirs(f_output_base, exist_ok=True)
    except OSError as e:
        perror('failed to create parent directories:', e)
        return 1

    # f_template_card
    if not a.f_template_card:
        perror('card template file must be specified.')
        return 1

    if not os.path.isfile(a.f_template_card):
        perror(f'card template "{a.f_template_card}" does not exist.')
        return 1

    # f_template_page
    if not a.f_template_page:
        perror('page template file must be specified.')
        return 1

    if not os.path.isfile(a.f_template_page):
        perror(f'page template "{a.f_template_page}" does not exist.')
        return 1

    # load in the template strings
    try:
        with open(a.f_template_card) as h_in:
            template_card = h_in.read()
        with open(a.f_template_page) as h_in:
            template_page = h_in.read()
    except OSError as e:
        perror('failed to read card/page template:', e)
        return 1

    # process the article
    with open(a.f_input) as h_in:
        # 
        article_header = dict()

        # firstly load in header
        for line in h_in:
            if line == '\n':
                break
            entry = [x.strip() for x in line.split(':', 1)]
            if len(entry) != 2:
                pwarn(f'line "{line}" is not a header entry!')
                continue
            key, value = entry
            article_header[key] = value

        # secondly, load in the `brief` description.
        article_brief_lines = []
        for line in h_in:
            if line == '\n':
                break
            article_brief_lines.append(line)
        article_brief = ' '.join(article_brief_lines)

        # lastly, load in the remaining `content` data, and pass it
        # through markdown.
        article_content = markdown.markdown(h_in.read())

    # automatic variables
    article_header['path-input'] = a.f_input
    article_header['path-output'] = a.f_output
    article_header['brief'] = article_brief
    article_header['content'] = article_content

    # perform the substitutions of the templates
    for key, value in article_header.items():
        target = f'@{key}@'
        template_card = template_card.replace(target, value)
        template_page = template_page.replace(target, value)

    # warn/fail on any non-substituted variables
    roam_pattern = re.compile(r'@[^@]*@')

    def findroaming(string, name):
        found = False
        for i, line in enumerate(string.split('\n')):
            n = i + 1
            matches = roam_pattern.findall(line)
            for match in matches:
                pwarn(f'{name}, line {n}: roaming {match}')
                found = True
        return found

    if (findroaming(template_card, 'card template') or \
        findroaming(template_page, 'page template')) and \
       a.fail_on_roam:
        perror('roaming variables in processed templates.')
        return 1

    # write out the populated templates
    try:
        with open(a.f_card, 'w') as h_out:
            h_out.write(template_card)
        with open(a.f_output, 'w') as h_out:
            h_out.write(template_page)
    except OSError as e:
        perror('failed to write card/page:', e)
        return 1

    #
    return 0


if __name__ == '__main__':
    exit(main())
